services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
        WWWUSER: '${WWWUSER:-1000}'
    container_name: 'filament-blog-app'
    restart: unless-stopped
    working_dir: /var/www
    environment:
      - WWWUSER=${WWWUSER:-1000}
      - OPTIMIZE_CACHE=false
      - OPTIMIZE_FILAMENT=false
      - RUN_MIGRATIONS=false
      - RUN_SEEDERS=false
    volumes:
      # Usar volumes nomeados para evitar problemas de permissão
      - app_storage:/var/www/storage
      - app_cache:/var/www/bootstrap/cache
      # Montar arquivos para desenvolvimento
      - ./resources:/var/www/resources:ro
      - ./.env:/var/www/.env:ro
    networks:
      - filament-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9000"]
      retries: 3
      timeout: 3s
      interval: 10s
      start_period: 30s

  nginx:
    image: nginx:alpine
    container_name: 'filament-blog-nginx'
    restart: unless-stopped
    ports:
      - '${APP_PORT:-8000}:80'
    volumes:
      # Nginx precisa dos arquivos estáticos
      - ./public:/var/www/public:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - filament-network
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "80"]
      retries: 3
      timeout: 3s
      interval: 10s

  redis:
    image: 'redis:alpine'
    container_name: 'filament-blog-redis'
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - 'redis_data:/data'
    networks:
      - filament-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      retries: 3
      timeout: 3s
      interval: 5s

  mailhog:
    image: 'mailhog/mailhog:latest'
    container_name: 'filament-blog-mailhog'
    restart: unless-stopped
    ports:
      - '${FORWARD_MAILHOG_PORT:-1025}:1025'
      - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
    networks:
      - filament-network

volumes:
  redis_data:
    driver: local
  app_storage:
    driver: local
  app_cache:
    driver: local

networks:
  filament-network:
    driver: bridge 
# Regras de Contexto para Projeto Filament

## Framework Principal
Este é um projeto Laravel com Filament PHP - um framework para construir painéis administrativos elegantes.

## Convenções de Código Filament

### Estrutura de Arquivos
- Resources: `app/Filament/Resources/`
- Pages: `app/Filament/Pages/`
- Widgets: `app/Filament/Widgets/`
- Actions: `app/Filament/Actions/`
- Forms: Use Filament Form Builder
- Tables: Use Filament Table Builder

### Padrões de Desenvolvimento
1. **Resources**: Sempre extender `Filament\Resources\Resource`
2. **Forms**: Usar `Forms\Components\` para campos
3. **Tables**: Usar `Tables\Columns\` para colunas
4. **Actions**: Usar `Tables\Actions\` ou `Forms\Actions\`
5. **Relacionamentos**: Usar `RelationManager` para relações

### Componentes Comuns
- TextInput, Textarea, Select, DatePicker
- TextColumn, BadgeColumn, IconColumn
- EditAction, DeleteAction, ViewAction
- Modal, Notification

### Boas Práticas
- Sempre usar Form Schema para formulários
- Implementar fillable nos models
- Usar Eloquent relationships
- Seguir convenções de nomenclatura Laravel
- Usar traduções quando possível

### Documentação de Referência
- Site oficial: https://filamentphp.com/docs
- Sempre consultar a documentação mais recente
- Priorizar soluções nativas do Filament
- Usar plugins oficiais quando disponível

### Exemplos de Uso
```php
// Resource básico
class UserResource extends Resource
{
    protected static ?string $model = User::class;
    
    public static function form(Form $form): Form
    {
        return $form->schema([
            TextInput::make('name')->required(),
            TextInput::make('email')->email()->required(),
        ]);
    }
    
    public static function table(Table $table): Table
    {
        return $table->columns([
            TextColumn::make('name'),
            TextColumn::make('email'),
        ]);
    }
}
```

## Instruções Específicas
- Sempre gerar código compatível com a versão mais recente do Filament
- Priorizar componentes nativos sobre soluções customizadas
- Implementar validações usando as ferramentas do Filament
- Usar o sistema de autorização integrado
- Seguir padrões de UI/UX do Filament

## Requisitos e Instalação Filament

### Requisitos do Sistema
- PHP 8.1+
- Laravel v10.0+
- Livewire v3.0+

### Comandos de Instalação
```bash
composer require filament/filament:"^3.3" -W
php artisan filament:install --panels
php artisan make:filament-user
```

### Configuração de Produção
- Implementar FilamentUser contract no Model User
- Usar disco de storage adequado para produção (s3 em vez de public)
- Otimizar performance com `php artisan filament:optimize`
- Configurar OPcache no servidor
- Executar `php artisan optimize` no deploy

## Boas Práticas de Segurança

### Controle de Acesso
```php
// No Model User
use Filament\Models\Contracts\FilamentUser;
use Filament\Panel;

class User extends Authenticatable implements FilamentUser
{
    public function canAccessPanel(Panel $panel): bool
    {
        return str_ends_with($this->email, '@yourdomain.com') 
            && $this->hasVerifiedEmail();
    }
}
```

### Storage em Produção
- Definir `FILAMENT_FILESYSTEM_DISK=s3` no .env
- Configurar disco s3 com política de acesso privado
- Nunca usar disco 'public' em produção

## Otimização de Performance

### Comandos de Cache
```bash
# Otimização completa
php artisan filament:optimize

# Comandos individuais
php artisan filament:cache-components
php artisan icons:cache

# Limpeza de cache
php artisan filament:optimize-clear
```

### Deploy e Upgrade
```bash
composer update
php artisan filament:upgrade
```

### Configuração composer.json
```json
{
    "post-autoload-dump": [
        "@php artisan filament:upgrade"
    ]
}
```

## Estrutura Recomendada

### Service Provider
- `app/Providers/Filament/AdminPanelProvider.php` (criado automaticamente)
- Verificar registro em `bootstrap/providers.php` (Laravel 11+)
- Verificar registro em `config/app.php` (Laravel 10-)

### Pacotes Inclusos
- Form Builder
- Table Builder  
- Notifications
- Actions
- Infolists
- Widgets

## Configurações de Ambiente

### Variáveis .env Importantes
```env
FILAMENT_FILESYSTEM_DISK=s3
```

### Publicação de Assets (se necessário)
```bash
php artisan vendor:publish --tag=filament-config
php artisan vendor:publish --tag=filament-panels-translations
```

## Containerização com Docker

### Conceitos Fundamentais Docker
- **Container**: Unidade executável que empacota código e dependências
- **Image**: Template somente leitura usado para criar containers
- **Registry**: Serviço para armazenar e distribuir imagens Docker
- **Docker Compose**: Ferramenta para definir aplicações multi-container

### Imagens Oficiais PHP e NGINX

#### Imagem Oficial PHP
- **Tags principais**: `php:8.2-fpm`, `php:8.2-apache`, `php:8.2-cli`
- **Variantes recomendadas**: 
  - `php:8.2-fpm-alpine` (menor tamanho)
  - `php:8.2-fpm` (Debian-based, mais compatível)
- **Extensões comuns**: pdo_mysql, gd, mbstring, zip, curl, xml

#### Imagem Oficial NGINX
- **Tags principais**: `nginx:alpine`, `nginx:stable`, `nginx:mainline`
- **Configuração padrão**: `/etc/nginx/nginx.conf`
- **Document root**: `/usr/share/nginx/html`
- **Logs**: `/var/log/nginx/`

### Estrutura de Projeto Laravel com Docker

#### Dockerfile para Laravel/Filament (Versão Completa)
```dockerfile
# Use imagem oficial PHP-FPM baseada em Debian
FROM php:8.2-fpm

# Argumentos de build
ARG WWWGROUP=1000
ARG NODE_VERSION=18

# Instalar dependências do sistema
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libmcrypt-dev \
    libgd-dev \
    jpegoptim optipng pngquant gifsicle \
    vim \
    unzip \
    zip \
    nodejs \
    npm \
    supervisor

# Limpar cache apt
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Instalar extensões PHP usando docker-php-ext-* helpers
RUN docker-php-ext-configure gd --with-freetype --with-jpeg
RUN docker-php-ext-install \
    pdo_mysql \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    zip \
    opcache

# Instalar Redis extension
RUN pecl install redis && docker-php-ext-enable redis

# Configurar PHP-FPM
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

# Instalar Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Definir diretório de trabalho
WORKDIR /var/www

# Copiar arquivos de configuração PHP
COPY docker/php/php.ini /usr/local/etc/php/conf.d/99-custom.ini
COPY docker/php/www.conf /usr/local/etc/php-fpm.d/www.conf

# Copiar arquivos composer primeiro (para cache layers)
COPY composer.json composer.lock ./

# Instalar dependências PHP
RUN composer install --no-scripts --no-autoloader --no-dev --prefer-dist

# Copiar package.json (para cache de Node.js)
COPY package*.json ./

# Instalar dependências Node.js
RUN npm ci --only=production

# Copiar código da aplicação
COPY . .

# Copiar entrypoint script
COPY docker/php/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Gerar autoload e otimizar
RUN composer dump-autoload --optimize --classmap-authoritative

# Build assets
RUN npm run build

# Definir permissões corretas
RUN chown -R sail:sail /var/www
RUN chmod -R 755 /var/www/storage /var/www/bootstrap/cache

# Configurar usuário não-root
USER sail

EXPOSE 9000

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["php-fpm"]
```

#### Dockerfile Alternativo (Alpine - Menor)
```dockerfile
FROM php:8.2-fpm-alpine

# Instalar dependências Alpine
RUN apk add --no-cache \
    freetype-dev \
    libjpeg-turbo-dev \
    libpng-dev \
    libzip-dev \
    zip \
    jpegoptim \
    optipng \
    pngquant \
    gifsicle \
    supervisor \
    nodejs \
    npm

# Instalar extensões PHP
RUN docker-php-ext-configure gd --with-freetype --with-jpeg
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip opcache

# Instalar Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www

# Copiar e instalar dependências
COPY composer.json composer.lock ./
RUN composer install --no-scripts --no-autoloader --no-dev

COPY package*.json ./
RUN npm ci --only=production

# Copiar aplicação
COPY . .

# Finalizar configuração
RUN composer dump-autoload --optimize
RUN npm run build
RUN chown -R www-data:www-data /var/www

EXPOSE 9000
CMD ["php-fpm"]
```

#### Docker Compose para Desenvolvimento
```yaml
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: filament-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - .:/var/www
    networks:
      - filament-network
    depends_on:
      - db
      - redis

  nginx:
    image: nginx:alpine
    container_name: filament-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - .:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - filament-network
    depends_on:
      - app

  db:
    image: mysql:8.0
    container_name: filament-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: filament_blog
      MYSQL_ROOT_PASSWORD: root
      MYSQL_PASSWORD: password
      MYSQL_USER: filament
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - filament-network

  redis:
    image: redis:alpine
    container_name: filament-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - filament-network

  mailhog:
    image: mailhog/mailhog
    container_name: filament-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - filament-network

volumes:
  mysql_data:

networks:
  filament-network:
    driver: bridge
```

#### Configuração NGINX Otimizada
```nginx
# docker/nginx/default.conf
server {
    listen 80;
    listen [::]:80;
    server_name localhost _;
    root /var/www/public;
    index index.php index.html index.htm;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Laravel routes
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # PHP-FPM configuration
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        
        # Timeout configurations
        fastcgi_connect_timeout 60s;
        fastcgi_send_timeout 60s;
        fastcgi_read_timeout 60s;
        
        # Buffer configurations
        fastcgi_buffer_size 128k;
        fastcgi_buffers 4 256k;
        fastcgi_busy_buffers_size 256k;
    }

    # Asset optimization
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Deny access to sensitive files
    location ~ /\.(?!well-known).* {
        deny all;
    }

    # Deny access to sensitive directories
    location ~ ^/(\.git|\.svn|\.hg|\.bzr) {
        deny all;
    }

    # Filament-specific optimizations
    location ~* ^/admin.*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1M;
        add_header Cache-Control "public";
        access_log off;
    }

    # Error pages
    error_page 404 /index.php;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
}
```

#### NGINX com SSL/HTTPS
```nginx
# docker/nginx/ssl.conf
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name your-domain.com;
    root /var/www/public;
    index index.php;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;

    # Include common configuration
    include /etc/nginx/conf.d/common.conf;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name your-domain.com;
    return 301 https://$server_name$request_uri;
}
```

#### Configuração NGINX Principal
```nginx
# docker/nginx/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Include server blocks
    include /etc/nginx/conf.d/*.conf;
}
```

### Arquivos de Configuração PHP

#### Configuração PHP Customizada
```ini
# docker/php/php.ini
[PHP]
post_max_size = 50M
upload_max_filesize = 50M
max_execution_time = 300
max_input_vars = 3000
memory_limit = 256M

[opcache]
opcache.enable=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=2
opcache.fast_shutdown=1
opcache.enable_cli=1

[Session]
session.cookie_httponly = 1
session.cookie_secure = 1
session.use_strict_mode = 1
```

#### Configuração PHP-FPM
```ini
# docker/php/www.conf
[www]
user = sail
group = sail
listen = 9000
listen.owner = sail
listen.group = sail
listen.mode = 0660

pm = dynamic
pm.max_children = 20
pm.start_servers = 3
pm.min_spare_servers = 2
pm.max_spare_servers = 4
pm.max_requests = 500

php_admin_value[error_log] = /var/log/fpm-php.www.log
php_admin_flag[log_errors] = on
```

#### Script de Entrada (Entrypoint)
```bash
#!/bin/bash
# docker/php/entrypoint.sh

set -e

# Aguardar MySQL estar disponível
until nc -z db 3306; do
    echo "Aguardando MySQL..."
    sleep 1
done

# Executar migrations se necessário
if [ "$RUN_MIGRATIONS" = "true" ]; then
    php artisan migrate --force
fi

# Executar seeders se necessário
if [ "$RUN_SEEDERS" = "true" ]; then
    php artisan db:seed --force
fi

# Limpar e otimizar cache
php artisan config:cache
php artisan route:cache
php artisan view:cache

# Criar link de storage
php artisan storage:link

# Otimizar Filament
php artisan filament:optimize

# Executar comando passado como parâmetro
exec "$@"
```

### Docker Compose com Configurações Avançadas

#### docker-compose.yml (Desenvolvimento)
```yaml
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    container_name: '${APP_NAME:-filament}-app'
    restart: unless-stopped
    environment:
      WWWUSER: '${WWWUSER:-1000}'
      LARAVEL_SAIL: 1
      XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
      XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
    volumes:
      - '.:/var/www'
      - './docker/php/php.ini:/usr/local/etc/php/conf.d/99-custom.ini'
    networks:
      - filament-network
    depends_on:
      - db
      - redis

  nginx:
    image: nginx:alpine
    container_name: '${APP_NAME:-filament}-nginx'
    restart: unless-stopped
    ports:
      - '${APP_PORT:-8000}:80'
    volumes:
      - '.:/var/www'
      - './docker/nginx/default.conf:/etc/nginx/conf.d/default.conf'
      - './docker/nginx/nginx.conf:/etc/nginx/nginx.conf'
    networks:
      - filament-network
    depends_on:
      - app

  db:
    image: 'mysql:8.0'
    container_name: '${APP_NAME:-filament}-mysql'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - 'mysql_data:/var/lib/mysql'
      - './docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql'
    networks:
      - filament-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      retries: 3
      timeout: 5s

  redis:
    image: 'redis:alpine'
    container_name: '${APP_NAME:-filament}-redis'
    restart: unless-stopped
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - 'redis_data:/data'
    networks:
      - filament-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      retries: 3
      timeout: 3s

  mailhog:
    image: 'mailhog/mailhog:latest'
    container_name: '${APP_NAME:-filament}-mailhog'
    ports:
      - '${FORWARD_MAILHOG_PORT:-1025}:1025'
      - '${FORWARD_MAILHOG_DASHBOARD_PORT:-8025}:8025'
    networks:
      - filament-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  filament-network:
    driver: bridge
```

### Comandos Docker Essenciais

#### Construção e Execução
```bash
# Construir e executar containers
docker-compose up -d --build

# Parar containers
docker-compose down

# Ver logs
docker-compose logs -f app

# Executar comandos no container
docker-compose exec app php artisan migrate
docker-compose exec app php artisan db:seed
docker-compose exec app composer install
```

#### Comandos Docker Básicos
```bash
# Verificar status dos containers
docker-compose ps

# Ver logs em tempo real
docker-compose logs -f
docker-compose logs -f app
docker-compose logs -f nginx

# Parar containers específicos
docker-compose stop app
docker-compose stop nginx

# Reiniciar containers
docker-compose restart app

# Remover containers e volumes
docker-compose down -v

# Rebuild específico
docker-compose build app --no-cache

# Executar bash no container
docker-compose exec app bash
docker-compose exec app sh  # Para Alpine
```

#### Comandos Laravel no Container
```bash
# Migrations
docker-compose exec app php artisan migrate
docker-compose exec app php artisan migrate:fresh --seed
docker-compose exec app php artisan migrate:rollback

# Cache e otimização
docker-compose exec app php artisan config:cache
docker-compose exec app php artisan route:cache
docker-compose exec app php artisan view:cache
docker-compose exec app php artisan optimize

# Filament específico
docker-compose exec app php artisan filament:install --panels
docker-compose exec app php artisan make:filament-user
docker-compose exec app php artisan filament:optimize
docker-compose exec app php artisan filament:upgrade

# Storage e permissões
docker-compose exec app php artisan storage:link
docker-compose exec app chown -R sail:sail /var/www/storage
docker-compose exec app chmod -R 755 /var/www/storage

# Composer no container
docker-compose exec app composer install
docker-compose exec app composer update
docker-compose exec app composer require package/name

# NPM no container
docker-compose exec app npm install
docker-compose exec app npm run dev
docker-compose exec app npm run build

# Queue workers
docker-compose exec app php artisan queue:work
docker-compose exec app php artisan queue:restart
```

#### Comandos de Debug e Monitoramento
```bash
# Verificar logs do PHP-FPM
docker-compose exec app tail -f /var/log/fpm-php.www.log

# Verificar configuração PHP
docker-compose exec app php -i
docker-compose exec app php -m  # módulos instalados

# Testar conexão com banco
docker-compose exec app php artisan tinker
# No tinker: DB::connection()->getPdo()

# Verificar status do Redis
docker-compose exec redis redis-cli ping

# Monitorar recursos
docker stats
docker-compose top
```

### Configurações de Ambiente Docker

#### Arquivo .env para Docker
```env
APP_NAME="Filament Blog"
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost:8000

DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=filament_blog
DB_USERNAME=filament
DB_PASSWORD=password

REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

FILAMENT_FILESYSTEM_DISK=public
```

### Multi-stage Build para Produção
```dockerfile
# Build stage
FROM node:18-alpine AS build-stage
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

# Production stage
FROM php:8.2-fpm-alpine AS production-stage

RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    oniguruma-dev \
    libxml2-dev \
    zip \
    unzip

RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www

COPY composer.json composer.lock ./
RUN composer install --no-dev --optimize-autoloader --no-scripts

COPY --from=build-stage /app/public/build ./public/build
COPY . .

RUN composer dump-autoload --optimize
RUN chown -R www-data:www-data /var/www
RUN chmod -R 755 /var/www/storage

EXPOSE 9000
CMD ["php-fpm"]
```

### Boas Práticas Docker

#### Performance e Segurança (Baseado na Documentação Oficial)
- **Usar imagens oficiais**: Sempre use `php:8.2-fpm` ou `nginx:alpine` como base
- **Multi-stage builds**: Separe build e runtime para reduzir tamanho final
- **Usuário não-root**: Execute aplicações como usuário específico (sail)
- **Health checks**: Implemente verificações de saúde para todos os serviços
- **Secrets management**: Use Docker secrets para dados sensíveis
- **Least privilege**: Container deve ter apenas permissões necessárias

#### Otimizações Específicas PHP
```dockerfile
# Instalar apenas extensões necessárias
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip opcache

# Usar copy otimizado para Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Cache de dependências em layers separadas
COPY composer.json composer.lock ./
RUN composer install --no-scripts --no-autoloader --no-dev

# Configurar OPcache para produção
RUN echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/opcache.ini
```

#### Otimizações NGINX
```nginx
# Worker processes = CPU cores
worker_processes auto;

# Connections por worker
worker_connections 1024;

# Gzip compression
gzip on;
gzip_comp_level 6;
gzip_types text/plain text/css application/json application/javascript;

# Client buffer sizes
client_body_buffer_size 10K;
client_header_buffer_size 1k;
client_max_body_size 50m;

# Timeouts
client_body_timeout 12;
client_header_timeout 12;
keepalive_timeout 15;
send_timeout 10;
```

#### Estrutura de Arquivos
```
project/
├── docker/
│   ├── nginx/
│   │   └── default.conf
│   ├── php/
│   │   └── Dockerfile
│   └── mysql/
│       └── init.sql
├── docker-compose.yml
├── docker-compose.prod.yml
├── Dockerfile
└── .dockerignore
```

#### .dockerignore (Otimizado)
```
# Dependencies
node_modules
vendor

# Git and versioning
.git
.gitignore
.gitattributes

# Environment files
.env
.env.*
!.env.example

# Laravel specific
storage/logs/*
storage/framework/cache/*
storage/framework/sessions/*
storage/framework/views/*
storage/app/public/*
bootstrap/cache/*

# Development files
.phpunit.result.cache
.vscode
.idea
*.log
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Documentation and README
README.md
CHANGELOG.md
docs/

# CI/CD files
.github/
.gitlab-ci.yml
```

#### Variáveis de Ambiente Docker
```env
# .env para Docker
# App
APP_NAME=FilamentBlog
APP_PORT=8000
WWWGROUP=1000
WWWUSER=1000

# Database
DB_HOST=db
DB_PORT=3306
DB_DATABASE=filament_blog
DB_USERNAME=filament
DB_PASSWORD=secret

# Redis
REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

# Mail (MailHog)
MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null

# Sail/Debug
SAIL_XDEBUG_MODE=develop,debug
SAIL_XDEBUG_CONFIG=client_host=host.docker.internal

# Filament
FILAMENT_FILESYSTEM_DISK=public
```

### Scripts de Automação

#### Setup Inicial Completo
```bash
#!/bin/bash
# scripts/setup.sh - Setup inicial do projeto

echo "🚀 Configurando projeto Filament com Docker..."

# Criar estrutura de pastas
mkdir -p docker/{nginx,php,mysql}
mkdir -p storage/{app/public,framework/{cache,sessions,views},logs}

# Copiar arquivos de configuração
cp .env.example .env

# Build e start containers
docker-compose up -d --build

# Aguardar MySQL
echo "⏳ Aguardando MySQL..."
sleep 30

# Instalar dependências
docker-compose exec app composer install
docker-compose exec app npm install

# Configurar Laravel
docker-compose exec app php artisan key:generate
docker-compose exec app php artisan storage:link
docker-compose exec app php artisan migrate:fresh

# Instalar Filament
docker-compose exec app php artisan filament:install --panels
docker-compose exec app php artisan make:filament-user

# Build assets
docker-compose exec app npm run build

# Otimizar
docker-compose exec app php artisan optimize
docker-compose exec app php artisan filament:optimize

echo "✅ Setup concluído! Acesse: http://localhost:8000/admin"
```

#### Makefile para Comandos
```makefile
# Makefile - Comandos simplificados

.PHONY: help setup up down fresh shell logs build

help: ## Mostrar ajuda
	@echo "Comandos disponíveis:"
	@echo "  make setup  - Setup inicial do projeto"
	@echo "  make up     - Iniciar containers"
	@echo "  make down   - Parar containers"  
	@echo "  make fresh  - Reset completo"
	@echo "  make shell  - Entrar no container app"
	@echo "  make logs   - Ver logs em tempo real"

setup: ## Setup inicial completo
	@./scripts/setup.sh

up: ## Iniciar containers
	docker-compose up -d

down: ## Parar containers
	docker-compose down

fresh: ## Reset completo do ambiente
	docker-compose down -v
	docker system prune -f
	make setup

shell: ## Entrar no container app
	docker-compose exec app bash

logs: ## Ver logs em tempo real
	docker-compose logs -f

build: ## Rebuild containers
	docker-compose build --no-cache
	docker-compose up -d
```

#### Script de Desenvolvimento
```bash
#!/bin/bash
# scripts/dev.sh - Comandos para desenvolvimento

case $1 in
  "migrate")
    docker-compose exec app php artisan migrate
    ;;
  "seed")
    docker-compose exec app php artisan db:seed
    ;;
  "fresh")
    docker-compose exec app php artisan migrate:fresh --seed
    ;;
  "cache")
    docker-compose exec app php artisan optimize:clear
    docker-compose exec app php artisan optimize
    ;;
  "test")
    docker-compose exec app php artisan test
    ;;
  "npm")
    docker-compose exec app npm $2
    ;;
  "composer")
    docker-compose exec app composer $2
    ;;
  *)
    echo "Uso: ./scripts/dev.sh [migrate|seed|fresh|cache|test|npm|composer]"
    ;;
esac
```

### Configurações de IDE

#### VSCode Settings
```json
// .vscode/settings.json
{
    "php.validate.executablePath": "./vendor/bin/php",
    "php.suggest.basic": false,
    "phpunit.phpunit": "./vendor/bin/phpunit",
    "phpunit.args": [
        "--configuration",
        "./phpunit.xml"
    ],
    "files.associations": {
        "*.blade.php": "blade"
    },
    "emmet.includeLanguages": {
        "blade": "html"
    }
}
```

#### Extensions Recomendadas
```json
// .vscode/extensions.json
{
    "recommendations": [
        "bmewburn.vscode-intelephense-client",
        "bradlc.vscode-tailwindcss",
        "onecentlin.laravel-blade",
        "ms-vscode-remote.remote-containers",
        "ms-azuretools.vscode-docker"
    ]
}
```

### Health Check e Troubleshooting

#### Script de Verificação
```bash
#!/bin/bash
# scripts/health-check.sh

echo "🔍 Verificando saúde dos serviços..."

# Verificar containers
if ! docker-compose ps | grep -q "Up"; then
    echo "❌ Containers não estão rodando"
    exit 1
fi

# Verificar MySQL
if ! docker-compose exec db mysqladmin ping -h"localhost" --silent; then
    echo "❌ MySQL não está respondendo"
    exit 1
fi

# Verificar Redis
if ! docker-compose exec redis redis-cli ping | grep -q PONG; then
    echo "❌ Redis não está respondendo"
    exit 1
fi

# Verificar aplicação
if ! curl -f http://localhost:8000 > /dev/null 2>&1; then
    echo "❌ Aplicação não está respondendo"
    exit 1
fi

echo "✅ Todos os serviços estão funcionando!"
```

### CI/CD com GitHub Actions

#### Configuração GitHub Actions
```yaml
# .github/workflows/deploy.yml
name: Deploy to VPS

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, zip
    
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    
    - name: Install Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    
    - name: Generate key
      run: php artisan key:generate
    
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
      run: vendor/bin/phpunit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd ${{ secrets.PROJECT_PATH }}
          
          # Pull latest changes
          git pull origin main
          
          # Run deployment script
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
```

#### Workflow de Staging
```yaml
# .github/workflows/staging.yml
name: Deploy to Staging

on:
  push:
    branches: [ develop, staging ]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd ${{ secrets.STAGING_PROJECT_PATH }}
          
          # Pull latest changes
          git pull origin develop
          
          # Run staging deployment
          chmod +x scripts/deploy-staging.sh
          ./scripts/deploy-staging.sh
```

#### Script de Deploy para Produção
```bash
#!/bin/bash
# scripts/deploy.sh - Deploy para VPS de produção

set -e

echo "🚀 Iniciando deploy para produção..."

# Backup do banco antes do deploy
echo "📦 Criando backup do banco..."
docker-compose exec -T db mysqldump -u root -p$DB_PASSWORD $DB_DATABASE > backup-$(date +%Y%m%d-%H%M%S).sql

# Parar containers
echo "⏸️ Parando containers..."
docker-compose down

# Atualizar código
echo "📥 Atualizando código..."
git fetch --all
git reset --hard origin/main

# Limpar caches e otimizar
echo "🧹 Limpando caches..."
docker-compose run --rm app composer install --no-dev --optimize-autoloader
docker-compose run --rm app npm ci --only=production
docker-compose run --rm app npm run build

# Iniciar containers em produção
echo "🐳 Iniciando containers..."
docker-compose -f docker-compose.prod.yml up -d --build

# Aguardar containers iniciarem
echo "⏳ Aguardando containers..."
sleep 30

# Executar migrations
echo "🗃️ Executando migrations..."
docker-compose exec -T app php artisan migrate --force

# Limpar e otimizar caches
echo "⚡ Otimizando aplicação..."
docker-compose exec -T app php artisan config:cache
docker-compose exec -T app php artisan route:cache
docker-compose exec -T app php artisan view:cache
docker-compose exec -T app php artisan filament:optimize

# Verificar saúde da aplicação
echo "🔍 Verificando saúde da aplicação..."
if curl -f http://localhost/health > /dev/null 2>&1; then
    echo "✅ Deploy concluído com sucesso!"
    
    # Notificar via webhook (Discord/Slack)
    curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"✅ Deploy para produção concluído com sucesso!"}' \
        $SLACK_WEBHOOK_URL
else
    echo "❌ Falha no health check!"
    
    # Rollback automático
    echo "🔄 Executando rollback..."
    git checkout HEAD~1
    docker-compose -f docker-compose.prod.yml up -d --build
    
    # Notificar falha
    curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"❌ Deploy falhou! Rollback executado."}' \
        $SLACK_WEBHOOK_URL
    
    exit 1
fi

echo "🎉 Deploy finalizado!"
```

#### Docker Compose para Produção
```yaml
# docker-compose.prod.yml
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        WWWGROUP: '${WWWGROUP:-1000}'
    container_name: '${APP_NAME:-filament}-app-prod'
    restart: unless-stopped
    environment:
      CONTAINER_ROLE: app
      WWWUSER: '${WWWUSER:-1000}'
    volumes:
      - './storage:/var/www/storage'
      - './bootstrap/cache:/var/www/bootstrap/cache'
    networks:
      - filament-network
    depends_on:
      - db
      - redis

  nginx:
    image: nginx:alpine
    container_name: '${APP_NAME:-filament}-nginx-prod'
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - './public:/var/www/public:ro'
      - './docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro'
      - './docker/nginx/ssl:/etc/nginx/ssl:ro'
    networks:
      - filament-network
    depends_on:
      - app

  db:
    image: 'mysql:8.0'
    container_name: '${APP_NAME:-filament}-mysql-prod'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
    volumes:
      - 'mysql_prod_data:/var/lib/mysql'
      - './docker/mysql/prod-init.sql:/docker-entrypoint-initdb.d/init.sql'
    networks:
      - filament-network
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: 'redis:alpine'
    container_name: '${APP_NAME:-filament}-redis-prod'
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - 'redis_prod_data:/data'
    networks:
      - filament-network

  # Worker para filas
  queue:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: '${APP_NAME:-filament}-queue-prod'
    restart: unless-stopped
    environment:
      CONTAINER_ROLE: queue
    volumes:
      - './storage:/var/www/storage'
    networks:
      - filament-network
    depends_on:
      - db
      - redis
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: '${APP_NAME:-filament}-scheduler-prod'
    restart: unless-stopped
    environment:
      CONTAINER_ROLE: scheduler
    volumes:
      - './storage:/var/www/storage'
    networks:
      - filament-network
    depends_on:
      - db
      - redis
    command: crond -f

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  filament-network:
    driver: bridge
```

### Configuração do VPS KingHost

#### Preparação do Servidor
```bash
# scripts/server-setup.sh - Configuração inicial do VPS

#!/bin/bash
echo "🔧 Configurando VPS para deploy..."

# Atualizar sistema
sudo apt update && sudo apt upgrade -y

# Instalar Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER

# Instalar Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# Instalar nginx (proxy reverso)
sudo apt install nginx -y

# Configurar firewall
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow https
sudo ufw --force enable

# Criar diretório do projeto
sudo mkdir -p /var/www/filament-blog
sudo chown $USER:$USER /var/www/filament-blog

# Configurar chaves SSH para GitHub
ssh-keygen -t rsa -b 4096 -C "deploy@filament-blog.com"
echo "📋 Adicione esta chave pública ao GitHub:"
cat ~/.ssh/id_rsa.pub

echo "✅ Servidor configurado! Clone o repositório em /var/www/filament-blog"
```

#### Configuração NGINX como Proxy Reverso
```nginx
# /etc/nginx/sites-available/filament-blog
server {
    listen 80;
    listen [::]:80;
    server_name seu-dominio.com www.seu-dominio.com;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name seu-dominio.com www.seu-dominio.com;

    # SSL Configuration
    ssl_certificate /etc/ssl/certs/seu-dominio.pem;
    ssl_certificate_key /etc/ssl/private/seu-dominio.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
    ssl_prefer_server_ciphers off;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Proxy to Docker container
    location / {
        proxy_pass http://localhost:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://localhost:8000/health;
        access_log off;
    }

    # Static files optimization
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://localhost:8000;
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Logs
    access_log /var/log/nginx/filament-blog.access.log;
    error_log /var/log/nginx/filament-blog.error.log;
}
```

### GitHub Repository Secrets

Configure estes secrets no seu repositório GitHub (Settings > Secrets and variables > Actions):

```env
# Secrets necessários no GitHub
HOST=seu-vps-ip.kinghost.net
USERNAME=seu-usuario-vps
SSH_PRIVATE_KEY=sua-chave-ssh-privada
PORT=22
PROJECT_PATH=/var/www/filament-blog

# Para staging (opcional)
STAGING_HOST=staging.seu-dominio.com
STAGING_USERNAME=usuario-staging
STAGING_PROJECT_PATH=/var/www/staging

# Webhooks para notificações
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/...
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/...
```

### Health Check Endpoint
```php
<?php
// routes/web.php - Adicionar endpoint de health check

Route::get('/health', function () {
    $checks = [
        'database' => false,
        'redis' => false,
        'storage' => false,
    ];

    try {
        // Check database
        DB::connection()->getPdo();
        $checks['database'] = true;
    } catch (Exception $e) {
        //
    }

    try {
        // Check Redis
        Redis::ping();
        $checks['redis'] = true;
    } catch (Exception $e) {
        //
    }

    try {
        // Check storage
        Storage::disk('public')->exists('');
        $checks['storage'] = true;
    } catch (Exception $e) {
        //
    }

    $allHealthy = collect($checks)->every(fn($check) => $check === true);

    return response()->json([
        'status' => $allHealthy ? 'healthy' : 'unhealthy',
        'checks' => $checks,
        'timestamp' => now(),
    ], $allHealthy ? 200 : 503);
});
``` 
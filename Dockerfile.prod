# Build stage para assets frontend
FROM node:18-alpine AS build-assets

WORKDIR /app

# Copiar package files
COPY package*.json ./

# Instalar dependências Node.js
RUN npm ci --only=production

# Copiar código fonte
COPY . .

# Build assets para produção
RUN npm run build

# Build stage para dependências PHP
FROM php:8.3-fpm-alpine AS build-php

# Instalar dependências de sistema
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    oniguruma-dev \
    libxml2-dev \
    libzip-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libmcrypt-dev \
    libintl \
    icu-dev \
    zip \
    unzip \
    supervisor

# Instalar extensões PHP
RUN docker-php-ext-configure gd --with-freetype --with-jpeg
RUN docker-php-ext-install \
    pdo_mysql \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    zip \
    opcache \
    intl

# Instalar Redis extension
RUN apk add --no-cache redis
RUN pecl install redis && docker-php-ext-enable redis

# Instalar Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www

# Copiar arquivos composer
COPY composer.json composer.lock ./

# Instalar dependências PHP
RUN composer install --no-dev --optimize-autoloader --no-scripts --no-interaction

# Production stage
FROM php:8.3-fpm-alpine AS production

# Argumentos de build
ARG WWWGROUP=1000

# Instalar dependências runtime
RUN apk add --no-cache \
    curl \
    nginx \
    supervisor \
    libpng \
    libjpeg-turbo \
    freetype \
    libzip \
    oniguruma \
    libxml2 \
    icu-libs

# Instalar extensões PHP (mesmo do build stage)
RUN docker-php-ext-configure gd --with-freetype --with-jpeg
RUN docker-php-ext-install \
    pdo_mysql \
    mbstring \
    exif \
    pcntl \
    bcmath \
    gd \
    zip \
    opcache \
    intl

# Instalar Redis extension
RUN apk add --no-cache redis
RUN pecl install redis && docker-php-ext-enable redis

# Criar usuário não-root
RUN addgroup -g $WWWGROUP -S sail
RUN adduser -u 1337 -S sail -G sail

# Configuração PHP para produção
COPY docker/php/php.ini /usr/local/etc/php/conf.d/99-custom.ini
COPY docker/php/www.conf /usr/local/etc/php-fpm.d/www.conf

# Configuração OPcache para produção
RUN echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.memory_consumption=256" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.interned_strings_buffer=16" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.max_accelerated_files=10000" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.revalidate_freq=0" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.fast_shutdown=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.enable_cli=1" >> /usr/local/etc/php/conf.d/opcache.ini \
    && echo "opcache.validate_timestamps=0" >> /usr/local/etc/php/conf.d/opcache.ini

# Definir diretório de trabalho
WORKDIR /var/www

# Copiar vendor do build stage
COPY --from=build-php /var/www/vendor ./vendor
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copiar assets buildados
COPY --from=build-assets /app/public/build ./public/build

# Copiar código da aplicação
COPY . .

# Gerar autoload otimizado
RUN composer dump-autoload --optimize --classmap-authoritative --no-dev

# Configurar permissões
RUN chown -R sail:sail /var/www
RUN chmod -R 755 /var/www/storage /var/www/bootstrap/cache

# Criar diretórios necessários
RUN mkdir -p /var/www/storage/logs
RUN mkdir -p /var/www/storage/framework/{cache,sessions,views}
RUN mkdir -p /var/www/bootstrap/cache

# Configurar permissões finais
RUN chown -R sail:sail /var/www/storage /var/www/bootstrap/cache
RUN chmod -R 775 /var/www/storage /var/www/bootstrap/cache

# Copiar e configurar entrypoint
COPY docker/php/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Configurar supervisor
COPY docker/php/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Configurar usuário
USER sail

# Expor porta PHP-FPM
EXPOSE 9000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:9000/ping || exit 1

# Entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Comando padrão
CMD ["php-fpm"] 